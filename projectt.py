# -*- coding: utf-8 -*-
"""projectt

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EWV-SReBFBEOahOq2mQK4qg9TB4ay7T5
"""

import pandas as pd

df=pd.read_csv('/data.csv')

df

###1

df[df['trip_distance']>50]



###2

df[df['payment_type'].isnull()]

###3 For each (PULocationID, DOLocationID) pair, determine the number of trips
#size:metraei ta noumero gia kathe value

df.groupby(['PULocationID','DOLocationID']).size()

# 4. Save all rows with missing VendorID, passenger_count, store_and_fwd_flag, payment_type in a new dataframe called bad,
#    and remove those rows from the original dataframe.

nulls = df[df[['VendorID', 'passenger_count', 'store_and_fwd_flag', 'payment_type']].isnull()]

###Remove the nulls from our dataframe

df = df.dropna(subset=['VendorID', 'passenger_count', 'store_and_fwd_flag', 'payment_type'])

df.head()

# 5. Add a duration column storing how long each trip has taken
df['duration'] = (pd.to_datetime(df['tpep_dropoff_datetime']) - pd.to_datetime(df['tpep_pickup_datetime'])).dt.total_seconds()

df.head()

###6

df['PULocationID'].value_counts()

#### 7. Cluster the pickup time of the day into 30-minute intervals

df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime']) ###Make the column datetime so we can extract the intervals
df['pickup_interval'] = df['tpep_pickup_datetime'].dt.floor('30min')

df

###8
result = df.groupby('pickup_interval').aggregate({'passenger_count':'mean','fare_amount':'mean'})

result.head()



###9
df.groupby(['payment_type','pickup_interval']).aggregate({'fare_amount':'mean'}) #aggregate: polles kolones , mean:avg

# 10. For each payment type, determine the interval when the average fare amount is maximum
max_fare_interval = df.loc[df.groupby('payment_type')['avg_fare_amount'].idxmax()]

df.groupby(['payment_type','pickup_interval'])['fare_amount'].mean() #gia mia kolona

###12
df.groupby(['PULocationID'])['fare_amount'].mean().max()

# 13. Build a new dataframe (called common) where, for each pickup location we keep all trips to the 5 most common destinations (i.e. each pickup location can have different common destinations).

trip_counts = df.groupby(['PULocationID', 'DOLocationID']).size().reset_index(name='trip_count')

top_destinations = trip_counts.sort_values(by=['PULocationID', 'trip_count'], ascending=[True, False]).groupby('PULocationID').head(5).reset_index()

common = df.merge(top_destinations[['PULocationID', 'DOLocationID']], on=['PULocationID', 'DOLocationID'])

common

#14. On the common dataframe, for each payment type and each interval, determine the average fare amount
avg_fare_common = common.groupby(['payment_type', 'pickup_interval'])['fare_amount'].mean().reset_index(name='avg_fare_amount')

#15. Compute the difference of the average fare amount computed in the previous point with those computed at point 9

avg_fare_by_payment_interval = df.groupby(['payment_type', 'pickup_interval'])['fare_amount'].mean().reset_index(name='avg_fare_amount')
fare_diff = avg_fare_common.merge(avg_fare_by_payment_interval, on=['payment_type', 'pickup_interval'], suffixes=('_common', '_all'))
fare_diff['fare_diff'] = fare_diff['avg_fare_amount_common'] - fare_diff['avg_fare_amount_all']

fare_diff.head()

# 16. Compute the ratio between the differences and the average fare amount from point 9
fare_diff['fare_diff_ratio'] = fare_diff['fare_diff'] / fare_diff['avg_fare_amount_all']

fare_diff.head()

df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])

df = df.sort_values(by=['VendorID', 'tpep_pickup_datetime'])

